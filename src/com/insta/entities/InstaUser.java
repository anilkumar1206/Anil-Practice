package com.insta.entities;

// Generated Aug 2, 2015 1:38:10 AM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;



/**
 * InstaUser generated by hbm2java
 */
@Entity
@NamedQueries({
	@NamedQuery(name = "getInstaUserByUserName", query = "select o from InstaUser o where o.userUsername = :username")
	
})
@Table(name = "insta_user", schema = "public",uniqueConstraints = @UniqueConstraint(columnNames = "user_username"))
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class InstaUser implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 7443531503908263788L;
	private long userId;
	private String userUsername;
	private String userPassword;
	private Date userCreatedDate;
	private Date userUpdatedDate;
	private boolean enabled;
	private Set<InstaImageComments> instaImageCommentses = new HashSet<InstaImageComments>(
			0);
	private Set<InstaVideo> instaVideos = new HashSet<InstaVideo>(0);
	private InstaUserProfile instaUserProfiles;
	private Set<InstaVideoComments> instaVideoCommentses = new HashSet<InstaVideoComments>(
			0);
	private InstaUserRole instaUserRoles;
	private Set<InstaImageAccess> instaImageAccesses = new HashSet<InstaImageAccess>(
			0);
	private Set<InstaImage> instaImages = new HashSet<InstaImage>(0);

	public InstaUser() {
	}

	public InstaUser(long userId, String userUsername, String userPassword,
			Date userCreatedDate, Date userUpdatedDate, boolean enabled) {
		this.userId = userId;
		this.userUsername = userUsername;
		this.userPassword = userPassword;
		this.userCreatedDate = userCreatedDate;
		this.userUpdatedDate = userUpdatedDate;
		this.enabled = enabled;
	}

	public InstaUser(long userId, String userUsername, String userPassword,
			Date userCreatedDate, Date userUpdatedDate, boolean enabled,
			Set<InstaImageComments> instaImageCommentses,
			Set<InstaVideo> instaVideos,
			InstaUserProfile instaUserProfiles,
			Set<InstaVideoComments> instaVideoCommentses,
			InstaUserRole instaUserRoles,
			Set<InstaImageAccess> instaImageAccesses,
			Set<InstaImage> instaImages) {
		this.userId = userId;
		this.userUsername = userUsername;
		this.userPassword = userPassword;
		this.userCreatedDate = userCreatedDate;
		this.userUpdatedDate = userUpdatedDate;
		this.enabled = enabled;
		this.instaImageCommentses = instaImageCommentses;
		this.instaVideos = instaVideos;
		this.instaUserProfiles = instaUserProfiles;
		this.instaVideoCommentses = instaVideoCommentses;
		this.instaUserRoles = instaUserRoles;
		this.instaImageAccesses = instaImageAccesses;
		this.instaImages = instaImages;
	}

	@Id
	@Column(name = "user_id", unique = true, nullable = false)
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	public long getUserId() {
		return this.userId;
	}

	public void setUserId(long userId) {
		this.userId = userId;
	}

	@Column(name = "user_username", nullable = false, length = 50)
	public String getUserUsername() {
		return this.userUsername;
	}

	public void setUserUsername(String userUsername) {
		this.userUsername = userUsername;
	}

	@Column(name = "user_password", nullable = false, length = 3000)
	public String getUserPassword() {
		return this.userPassword;
	}

	public void setUserPassword(String userPassword) {
		this.userPassword = userPassword;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "user_created_date", nullable = false, length = 29)
	public Date getUserCreatedDate() {
		return this.userCreatedDate;
	}

	public void setUserCreatedDate(Date userCreatedDate) {
		this.userCreatedDate = userCreatedDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "user_updated_date", nullable = false, length = 29)
	public Date getUserUpdatedDate() {
		return this.userUpdatedDate;
	}

	public void setUserUpdatedDate(Date userUpdatedDate) {
		this.userUpdatedDate = userUpdatedDate;
	}

	@Column(name = "enabled", nullable = false)
	public boolean isEnabled() {
		return this.enabled;
	}

	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "instaUser")
	public Set<InstaImageComments> getInstaImageCommentses() {
		return this.instaImageCommentses;
	}

	public void setInstaImageCommentses(
			Set<InstaImageComments> instaImageCommentses) {
		this.instaImageCommentses = instaImageCommentses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "instaUser")
	public Set<InstaVideo> getInstaVideos() {
		return this.instaVideos;
	}

	public void setInstaVideos(Set<InstaVideo> instaVideos) {
		this.instaVideos = instaVideos;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "instaUser",cascade=CascadeType.ALL)
	public InstaUserProfile getInstaUserProfiles() {
		return this.instaUserProfiles;
	}

	public void setInstaUserProfiles(InstaUserProfile profile) {
		this.instaUserProfiles = profile;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "instaUser")
	public Set<InstaVideoComments> getInstaVideoCommentses() {
		return this.instaVideoCommentses;
	}

	public void setInstaVideoCommentses(
			Set<InstaVideoComments> instaVideoCommentses) {
		this.instaVideoCommentses = instaVideoCommentses;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "instaUser", cascade=CascadeType.ALL)
	public InstaUserRole getInstaUserRoles() {
		return this.instaUserRoles;
	}

	public void setInstaUserRoles(InstaUserRole role) {
		this.instaUserRoles = role;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "instaUser")
	public Set<InstaImageAccess> getInstaImageAccesses() {
		return this.instaImageAccesses;
	}

	public void setInstaImageAccesses(Set<InstaImageAccess> instaImageAccesses) {
		this.instaImageAccesses = instaImageAccesses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "instaUser")
	public Set<InstaImage> getInstaImages() {
		return this.instaImages;
	}

	public void setInstaImages(Set<InstaImage> instaImages) {
		this.instaImages = instaImages;
	}

}
