package com.insta.entities;

// Generated Aug 2, 2015 3:40:21 PM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * InstaImage generated by hbm2java
 */
@NamedQueries({
	@NamedQuery(name = "getInstaImagesByUserName", query = "select o from InstaImage o where o.imageUploadedBy = :username")
	
})
@Entity
@Table(name = "insta_image", schema = "public")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class InstaImage implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -4499735063712079777L;
	private long imageId;
	private InstaUser instaUser;
	private String imageName;
	private String imageDescription;
	private String imageContentType;
	private long imageSize;
	private boolean imageIsPrivate;
	private Date imageCreatedDate;
	private Date imageUpdatedDate;
	private String imageUploadedBy;
	private InstaImageData instaImageData ;
	private Set<InstaImageComments> instaImageCommentses = new HashSet<InstaImageComments>(
			0);
	private Set<InstaImageMetadata> instaImageMetadatas = new HashSet<InstaImageMetadata>(
			0);
	private Set<InstaImageLikes> instaImageLikeses = new HashSet<InstaImageLikes>(
			0);

	public InstaImage() {
	}

	public InstaImage(long imageId, InstaUser instaUser, String imageName,
			String imageDescription, String imageContentType, long imageSize,
			boolean imageIsPrivate, Date imageCreatedDate, Date imageUpdatedDate) {
		this.imageId = imageId;
		this.instaUser = instaUser;
		this.imageName = imageName;
		this.imageDescription = imageDescription;
		this.imageContentType = imageContentType;
		this.imageSize = imageSize;
		this.imageIsPrivate = imageIsPrivate;
		this.imageCreatedDate = imageCreatedDate;
		this.imageUpdatedDate = imageUpdatedDate;
	}

	public InstaImage(long imageId, InstaUser instaUser, String imageName,
			String imageDescription, String imageContentType, long imageSize,
			boolean imageIsPrivate, Date imageCreatedDate,
			Date imageUpdatedDate, String imageUploadedBy,
			InstaImageData instaImageData,
			Set<InstaImageComments> instaImageCommentses,
			Set<InstaImageMetadata> instaImageMetadatas,
			Set<InstaImageLikes> instaImageLikeses) {
		this.imageId = imageId;
		this.instaUser = instaUser;
		this.imageName = imageName;
		this.imageDescription = imageDescription;
		this.imageContentType = imageContentType;
		this.imageSize = imageSize;
		this.imageIsPrivate = imageIsPrivate;
		this.imageCreatedDate = imageCreatedDate;
		this.imageUpdatedDate = imageUpdatedDate;
		this.imageUploadedBy = imageUploadedBy;
		this.instaImageData = instaImageData;
		this.instaImageCommentses = instaImageCommentses;
		this.instaImageMetadatas = instaImageMetadatas;
		this.instaImageLikeses = instaImageLikeses;
	}

	@Id
	@Column(name = "image_id", unique = true, nullable = false)
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	public long getImageId() {
		return this.imageId;
	}

	public void setImageId(long imageId) {
		this.imageId = imageId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id", nullable = false)
	public InstaUser getInstaUser() {
		return this.instaUser;
	}

	public void setInstaUser(InstaUser instaUser) {
		this.instaUser = instaUser;
	}

	@Column(name = "image_name", nullable = false, length = 500)
	public String getImageName() {
		return this.imageName;
	}

	public void setImageName(String imageName) {
		this.imageName = imageName;
	}

	@Column(name = "image_description", nullable = false, length = 4000)
	public String getImageDescription() {
		return this.imageDescription;
	}

	public void setImageDescription(String imageDescription) {
		this.imageDescription = imageDescription;
	}

	@Column(name = "image_content_type", nullable = false, length = 500)
	public String getImageContentType() {
		return this.imageContentType;
	}

	public void setImageContentType(String imageContentType) {
		this.imageContentType = imageContentType;
	}

	@Column(name = "image_size", nullable = false)
	public long getImageSize() {
		return this.imageSize;
	}

	public void setImageSize(long imageSize) {
		this.imageSize = imageSize;
	}

	@Column(name = "image_is_private", nullable = false)
	public boolean isImageIsPrivate() {
		return this.imageIsPrivate;
	}

	public void setImageIsPrivate(boolean imageIsPrivate) {
		this.imageIsPrivate = imageIsPrivate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "image_created_date", nullable = false, length = 29)
	public Date getImageCreatedDate() {
		return this.imageCreatedDate;
	}

	public void setImageCreatedDate(Date imageCreatedDate) {
		this.imageCreatedDate = imageCreatedDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "image_updated_date", nullable = false, length = 29)
	public Date getImageUpdatedDate() {
		return this.imageUpdatedDate;
	}

	public void setImageUpdatedDate(Date imageUpdatedDate) {
		this.imageUpdatedDate = imageUpdatedDate;
	}

	@Column(name = "image_uploaded_by", length = 100)
	public String getImageUploadedBy() {
		return this.imageUploadedBy;
	}

	public void setImageUploadedBy(String imageUploadedBy) {
		this.imageUploadedBy = imageUploadedBy;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "instaImage",cascade=CascadeType.ALL)
	public InstaImageData getInstaImageData() {
		return this.instaImageData;
	}

	public void setInstaImageData(InstaImageData instaImageData) {
		this.instaImageData = instaImageData;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "instaImage",cascade=CascadeType.ALL)
	public Set<InstaImageComments> getInstaImageCommentses() {
		return this.instaImageCommentses;
	}

	public void setInstaImageCommentses(
			Set<InstaImageComments> instaImageCommentses) {
		this.instaImageCommentses = instaImageCommentses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "instaImage",cascade=CascadeType.ALL)
	public Set<InstaImageMetadata> getInstaImageMetadatas() {
		return this.instaImageMetadatas;
	}

	public void setInstaImageMetadatas(
			Set<InstaImageMetadata> instaImageMetadatas) {
		this.instaImageMetadatas = instaImageMetadatas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "instaImage",cascade=CascadeType.ALL)
	public Set<InstaImageLikes> getInstaImageLikeses() {
		return this.instaImageLikeses;
	}

	public void setInstaImageLikeses(Set<InstaImageLikes> instaImageLikeses) {
		this.instaImageLikeses = instaImageLikeses;
	}

}
